local
  $(SML_LIB)/basis/basis.mlb
  ../Report.mlb
in



(*********************************
 *                               *
 *    DataStructue               *
 *                               *
 *********************************)

(* The ordered signature that the ordered map and set relies on *)
DataStructures/Ordered.sig


(* Map *)
DataStructures/Map/Map.sig

(* DataStructures/Map/ListMap.sml *)


(* Ordered Map *)
DataStructures/OrderedMap/OrderedMap.sig

DataStructures/OrderedMap/ListOrderedMapFn.sml
DataStructures/OrderedMap/UnbalancedOrderedMapFn.sml
(* RedBlackOrderedMapFn.sml *)
(* OrderedMultiset.sig *)

DataStructures/OrderedMap/OrderedMapFn.sml (* Default implementation *)


(* Ordered Set *)
DataStructures/OrderedSet/OrderedSet.sig

DataStructures/OrderedSet/UnbalancedOrderedSetFn.sml
DataStructures/OrderedSet/TrieOrderedSetFn.sml
DataStructures/OrderedSet/RedBlackOrderedSetFn.sml

DataStructures/OrderedSet/OrderedSetFn.sml (* Default implementation *)

DataStructures/OrderedSet/StringOrderedSet.sml (* Default implementation using strings *)


(* Set *)
DataStructures/Set/Set.sig

DataStructures/Set/ListSet.sml

DataStructures/Set/Set.sml (* Default implementation *)


(* Multiset *)
DataStructures/Multiset/Multiset.sig



(* Heap *)
DataStructures/Heap/Heap.sig

DataStructures/Heap/PairingHeapFn.sml

DataStructures/Heap/HeapFn.sml (* Default implementation *)

DataStructures/Heap/IntMinHeap.sml (* specialised int HeapFn with sorting min to max *)
DataStructures/Heap/IntMaxHeap.sml (* specialised int HeapFn with sorting max to min *)


(* Queue *)
DataStructures/Queue/Queue.sig


(* Tree *)
DataStructures/Tree/Tree.sig

DataStructures/Tree/PlainTreeFn.sml


(* Dictionary *)
DataStructures/Dictionary/Dictionary.sml (* Specialised map with string keys *)


(* Graph *)
(* DataStructures/Graph/Graph.sig 

   DataStructures/Graph/LabeledGraph.sig *)


(*********************************
 *                               *
 *    Algorithm                  *
 *                               *
 *********************************)

(* Sorting *)
Algorithms/ListSort/ListSort.sig

Algorithms/ListSort/QuickSortList.sml

Algorithms/ListSort/ListSort.sml (* Default implementation *)



(*********************************
 *                               *
 *    Benchmark                  *
 *                               *
 *********************************)


Benchmark/Benchmark.sig 
Benchmark/Benchmark.sml


end
