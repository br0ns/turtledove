local
  $(SML_LIB)/basis/basis.mlb

  (* Used by List.shuffle - rewrite to use mlton *)
  $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
in

(***
 * Extensions to the standard library
 *)

Extensions/List.sig Extensions/List.sml
Extensions/TextIO.sig Extensions/TextIO.sml
Extensions/General.sig Extensions/General.sml
Extensions/Math.sig Extensions/Math.sml
Extensions/String.sig Extensions/String.sml


(***
 * Other
 *)

Other/Lazy.sig Other/Lazy.sml
Other/Benchmark.sig Other/Benchmark.sml
Other/Show.sig Other/Show.sml
Other/Either.sig Other/Either.sml
Other/Pair.sig Other/Pair.sml

Other/Pretty.sig Other/Pretty.sml
Other/Layout.sig Other/Layout.sml


(***
 * DATA STRUCTURES
 *)

(* Has a type t and a curried function compare *)
DataStructures/Ordered.sig


(*
 * Map
 *)
DataStructures/Map/Map.sig
(* DataStructures/Map/ListMap.sml *)


(*
 * Ordered Map
 *)
DataStructures/OrderedMap/OrderedMap.sig

DataStructures/OrderedMap/ListOrderedMapFn.sml
DataStructures/OrderedMap/UnbalancedOrderedMapFn.sml
(* DataStructures/OrderedMap/RedBlackOrderedMapFn.sml *)

(* Default implementations *)
DataStructures/OrderedMap/OrderedMapFn.sml
DataStructures/OrderedMap/Dictionary.sml (* string keys *)
DataStructures/OrderedMap/IntMap.sml (* int keys *)
DataStructures/OrderedMap/CharMap.sml (* char keys *)


(*
 * Ordered Set
 *)
DataStructures/OrderedSet/OrderedSet.sig

DataStructures/OrderedSet/UnbalancedOrderedSetFn.sml
(* Given an ordered map the TrieOrderedSetFn returns an ordered set on lists of
   the keys type *)
DataStructures/OrderedSet/TrieOrderedSetFn.sml
DataStructures/OrderedSet/RedBlackOrderedSetFn.sml

(* Default implementations *)
DataStructures/OrderedSet/OrderedSetFn.sml (* Default implementation *)
DataStructures/OrderedSet/StringSet.sml
DataStructures/OrderedSet/IntSet.sml
DataStructures/OrderedSet/CharSet.sml


(*
 * Set
 *)
DataStructures/Set/Set.sig

DataStructures/Set/ListSet.sml

(* Default implementation *)
DataStructures/Set/Set.sml


(*
 * Multiset
 *)
DataStructures/Multiset/Multiset.sig


(*
 * Heap
 *)
DataStructures/Heap/Heap.sig

DataStructures/Heap/PairingHeapFn.sml

(* Default implementations *)
DataStructures/Heap/HeapFn.sml
DataStructures/Heap/IntMinHeap.sml
DataStructures/Heap/IntMaxHeap.sml


(*
 * Queue
 *)
DataStructures/Queue/Queue.sig
DataStructures/Queue/Deque.sig


(*
 * Tree
 *)
DataStructures/Tree/Tree.sig

DataStructures/Tree/PlainTreeFn.sml

(* Default implementation *)
DataStructures/Tree/Tree.sml


(*
 * Graph
 *)
(* DataStructures/Graph/Graph.sig
   DataStructures/Graph/LabeledGraph.sig *)


(***
 * Algorithms
 *)

(* Sort should go away - moved to extensions *)
Algorithms/ListSort/ListSort.sig
Algorithms/ListSort/QuickSortList.sml
Algorithms/ListSort/ListSort.sml (* Default implementation *)
Algorithms/TopologicalSort/TopologicalSort.sig
Algorithms/TopologicalSort/TopologicalSort.sml


(***
 * Top Level declarations
 *)
TopLevel.sml

end
