Normalising: collatz.sml
Parsing mlb/sml: 
  User: 0.528, System: 0.168, Total: 0.696
Resolving: 
  User: 4.836, System: 0.700, Total: 5.536
Normalizing
  [] = []
  (x :: xs) = (if x mod 2 = 0 then
                 x div 2
               else
                 3 * x + 1) :: collatz xs
After elimination:
  (nil) = (nil)
  (x :: xs) = (if x mod 2 = 0 then
                 x div 2
               else
                 3 * x + 1) :: collatz xs
Generalising
  (nil) = (nil)
becomes
  x = x
Now have
  x = x

Generalising
  (x :: xs) = (if x mod 2 = 0 then
                 x div 2
               else
                 3 * x + 1) :: collatz xs
becomes
  (x :: xs) = (if x mod 2 = 0 then
                 x div 2
               else
                 3 * x + 1) :: collatz xs
Now have
  (x :: xs) = (if x mod 2 = 0 then
                 x div 2
               else
                 3 * x + 1) :: collatz xs
  x = x

Before:
fun collatz [] = []
  | collatz (x :: xs) = (if x mod 2 = 0 then
                           x div 2
                         else
                           3 * x + 1) :: collatz xs

After:
fun collatz (x :: xs) = (if x mod 2 = 0 then
                           x div 2
                         else
                           3 * x + 1) :: collatz xs
  | collatz x = x
